#+TITLE: AoC2024

* Solutions
- [[file:day-01.el][Day 01]]
- [[file:day-02.el][Day 02]]
- [[file:day-03.el][Day 03]]
- [[file:day-04.el][Day 04]]
- [[file:day-05.el][Day 05]]  
- [[file:day-06.el][Day 06]] (partial)
- Day 07  
- [[file:day-08.el][Day 08]]
- [[file:day-09.el][Day 09]] (partial)

  
* Toolkit
The code below can be tangled into your elisp load path to provide af ew convenience methods like =aoc-open-in-browser= and =aoc-download-input=.  place the contents of the =session== cookie into =.cookie= at project root and downloading puzzle input will be a breeze.
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/advent-of-code.el
(require 'request)

(defvar aoc-cookie nil
  "cookie used to grab puzzle input")

(defvar aoc-solutiion-path-format nil
  "path format to advent of code solutions, use of dateformatters allowed")

(defvar aoc-input-path-format nil
  "path format to advent of code input, use of dateformatters allowed")

(unless aoc-input-path-format (setq aoc-input-path-format "input/%02d.txt"))

(defvar aoc-current-date nil)

(defun aoc-input-path (date)
  (format aoc-input-path-format (cadr date)))

(defun aoc-read-file (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))


(defun aoc-read-input (&optional date)
  (split-string (aoc-read-file (aoc-input-path (or date aoc-date))) "\n" t))

(cl-defun aoc-open-solution ())
(cl-defun aoc-install-from-template ())

(cl-defun aoc-open-in-browser (&optional date)
  "open day in browser"
  (interactive)
  (browse-url (aoc--puzzle-url (aoc--get-date date))))

(defun aoc--get-date (date)
  (list
   (or (when date (car date)) (read-number "Year: " 2024))
   (or (when date (cadr date)) (read-number "Day: "))))

(cl-defun aoc-download-input (&optional date)
  (interactive)
  (cl-letf* ((date (aoc--get-date date))
    	     (url (aoc--input-url date)))
    (request url
      :sync t
      :headers (list (cons 'cookie (format "session=%s" (aoc-read-file ".cookie"))))
      :complete (cl-function (lambda (&key data &allow-other-keys)
        		       (let ((path (aoc-input-path date)))
    				 (with-temp-buffer
    				   (insert data)
    				   (write-file path))
    				 (message "Written input to: %s" path)))))))

(defun aoc--input-url (date)
  (format "https://adventofcode.com/%d/day/%d/input" (car date) (cadr date)))

(defun aoc--puzzle-url (date)
  (format "https://adventofcode.com/%d/day/%d" (car date) (cadr date)))

(defun aoc-answer (answer)
  (let ((answer (if (numberp answer)
  		    (number-to-string answer)
  		  answer)))
    (kill-new answer)
    (message "Answer: %s" answer)))

(provide 'advent-of-code)

;; Local Variables:
;; read-symbol-shorthands: (("aoc-" . "advent-of-code-"))
;; End:
#+end_src

