#+TITLE: AoC2024

* Solutions
- [[file:day-01.el][Day 01]]
- [[file:day-02.el][Day 02]]
- [[file:day-03.el][Day 03]]
- [[file:day-04.el][Day 04]]
- [[file:day-05.el][Day 05]]  
- [[file:day-06.el][Day 06]] (partial)
- Day 07  
- [[file:day-08.el][Day 08]]
- [[file:day-09.el][Day 09]] (partial)
- Day 10  
- [[file:day-11.el][Day 11]]

  
* Toolkit
The code below can be tangled into your elisp load path to provide af ew convenience methods like =aoc-open-in-browser= and =aoc-download-input=.  place the contents of the =session== cookie into =.cookie= at project root and downloading puzzle input will be a breeze.
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/advent-of-code.el
(require 'request)

(defvar aoc-solution-path-format nil
  "path format to advent of code solutions, use of dateformatters allowed")

(defvar aoc-input-path-format nil
  "path format to advent of code input, use of dateformatters allowed")

(unless aoc-input-path-format (setq aoc-input-path-format "input/%02d.txt"))
(unless aoc-solution-path-format (setq aoc-solution-path-format "day-%02d.el"))

(defvar aoc-current-date nil)

(defun aoc-input-path (date)
  (format aoc-input-path-format (cadr date)))

(defun aoc-read-file (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))


(defun aoc-read-input (&optional date parser)
  (let* ((date (aoc--get-date date))
         (path (aoc-input-path date)))
    (unless (file-exists-p path)
      (when (y-or-n-p "Input not found, download now?")
        (aoc-download-input date)))
    (let ((file (aoc-read-file path)))         
      (if parser
          (funcall parser file)
        (split-string file "\n" t)))))

(defun aoc-install-from-template ()
  (interactive)
  (let* ((date (aoc--read-date))
         (path (format aoc-solution-path-format (cadr date))))
    (with-temp-buffer
      (insert (format ";; -*- aoc-date: (%d %d); -*-\n\n" (car date) (cadr date)))
      (insert "(require 'advent-of-code)\n\n")
      (write-file path))
    (find-file path)))

(defun aoc-load-and-store-cookie ()
  (when (file-exists-p ".cookie")
    (url-cookie-store "session" (string-trim (aoc-read-file ".cookie")) nil ".adventofcode.com" "/")))

(cl-defun aoc-open-in-browser (&optional date)
  "open day in browser"
  (interactive)
  (aoc-load-and-store-cookie)
  (browse-url (aoc--puzzle-url (aoc--get-date date))))

(defun aoc--read-date ()
  (let ((date (org-time-string-to-seconds (org-read-date))))
    (list (string-to-number (format-time-string "%Y" date))
          (string-to-number (format-time-string "%d" date)))))


(defun aoc--get-date (&optional date)
  (let ((date (or date
                  (if (boundp 'aoc-date)
                      aoc-date
                    (aoc--read-date)))))
    date))

(cl-defun aoc-download-input (&optional date)
  (interactive)
  (cl-letf* ((date (or date (aoc--read-date)))
    	     (url (aoc--input-url date)))
    (request url
      :sync t
      :headers (list (cons 'cookie (format "session=%s" (string-trim (aoc-read-file ".cookie")))))
      :complete (cl-function (lambda (&key data &allow-other-keys)
        		       (let ((path (aoc-input-path date)))
    				 (with-temp-buffer
    				   (insert data)
    				   (write-file path))
    				 (message "Written input to: %s" path)))))))

(defun aoc--input-url (date)
  (format "https://adventofcode.com/%d/day/%d/input" (car date) (cadr date)))

(defun aoc--puzzle-url (date)
  (format "https://adventofcode.com/%d/day/%d" (car date) (cadr date)))

(defun aoc-answer (answer)
  (let ((answer (if (numberp answer)
  		    (number-to-string answer)
  		  answer)))
    (kill-new answer)
    (message "Answer: %s" answer)))

(provide 'advent-of-code)
#+end_src

#+RESULTS:
: advent-of-code

